name: lint

on:
  push:
    branches:
      - main
      - rustify
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pages: write
  id-token: write


jobs:
  markdown:
    name: "episode/markdown"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
  audio:
    name: "episode/audio"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Get all changed episode files
      id: changed-markdown-files
      uses: step-security/changed-files@v45
      with:
        # Avoid using single or double quotes for multiline patterns
        files: |
           _episodes/*/*.md
    - name: File size specifications are correct
      # note: we only guard this one since it's slow to download all the
      # episode files; the others are fine to run for all files since they run
      # locally.
      if: steps.changed-markdown-files.outputs.any_changed == 'true'
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-markdown-files.outputs.all_changed_files }}
      run: |
        for episode in ${ALL_CHANGED_FILES}; do
          # skip deleted episodes (if any)
          [ -e "$episode" ] || continue;
          length=$(grep 'length:' "$episode" | head -n1 | awk '{print $2}' | sed 's/"//g')
          file=$(grep 'file:' "$episode" | head -n1 | sed -e 's/^file: //' -e 's/"//g')
          size=$(curl --head -f -s "$file" | grep -i content-length | awk '{print $2}' | sed 's/\r//')
          if [ -z $size ]; then
            echo "couldn't get content length of \"$file\""
            exit 1
          fi
          if [ $size -ne $length ]; then
            echo "$(basename "$episode"): ${length}b (reported) != ${size}b (actual)"
            exit 1
          fi
        done
  transcript:
    name: "episode/transcript"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Transcripts match episodes
      run: |
        for transcript in _transcripts/*/*.md; do
          episode="_episodes/$(basename "$(dirname "$transcript")")/$(basename "$transcript")"
          if [[ ! -e $episode ]]; then
            echo "$transcript: no matching episode"
            exit 1
          fi
        done
  build:
    name: "build"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Test
      run: cargo test

    - name: Build site
      run: cargo run

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  valdidate:
    name: "feed/validate"
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Grab feed validator
      run: |
        git clone https://github.com/w3c/feedvalidator.git

    - uses: actions/setup-python@v4
      with:
      # https://github.com/w3c/feedvalidator/issues/142
        python-version: '3.12'
        cache: 'pip'

    # - name: Validate feed
    #   run: |
    #     # Fix Ubuntu MIME type for RSS
    #     sudo sed -i 's@application/x-rss+xml@application/rss+xml@' /etc/mime.types
    #     cp _site/podcast.rss validate.rss
    #     # https://github.com/rubys/feedvalidator/issues/16
    #     sed -i -e 's/https:/http:/g' \
    #            -e '/rel="self"/ s@href="[^"]*"@href="file://'"$(pwd)"'/validate.rss"@' \
    #            -e '/xmlns:content/a \
    #                 xml:base="https://rustacean-station.org"' \
    #            validate.rss
    #     cd feedvalidator
    #     pip install -r requirements.txt
    #     if ! python src/demo.py ../validate.rss; then
    #       cat ../validate.rss
    #       exit 1
    #     fi
